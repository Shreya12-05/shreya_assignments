#include <iostream>  // SHREYA
using namespace std; // SID:21104108

// Function Implementing Bubble Sort Algorithm

void bubble_sort(int arr[], int n)
{
    int i = 0, j = 1, t = n - 1;
    int no_of_swap = 0;
    int no_of_comp = 0;
    while (t > 0)
    {
        while (j <= t)
        {
            if (arr[i] > arr[j])
            {
                swap(arr[i], arr[j]);
                no_of_swap++;
            }
            i++, j++;
            no_of_comp++;
        }
        t--;
        i = 0, j = 1;
    }
    cout << " . Number of swaps:" << no_of_swap << endl;
    cout << " . Number of comparisons:" << no_of_comp << endl;
    cout << " . INPLACE SORTING ALGORITHM USED" << endl;
}

// Function that returns index of minimum value in an array
int min_int(int arr[], int start, int end)
{
    // Initialising minimum value as first element of array
    int m = arr[start];  
    int min_int = start; 
    for (int i = start; i <= end; i++)
    {
        int min_prev = m;
        m = min(m, arr[i]);
        if (m < min_prev)
        {
            min_int = i;
        }
    }
    return min_int;
}

// Function Implementing Selection-Sort Algorithm
void selection_sort(int arr[], int n)
{
    
    int start = 0, end = n - 1;
    int no_of_swap = 0;
    int no_of_comp = 0;
    while (start < end)
    {
        int mi = min_int(arr, start, end); 
        no_of_comp = no_of_comp + (end - start + 1);
        if (start != mi)
        {
            swap(arr[start], arr[mi]);
            no_of_swap++;
        }
        start++;
    }
    cout << " . Number of swaps:" << no_of_swap << endl;
    cout << " . Number of comparisons:" << no_of_comp << endl;
    cout << " . INPLACE SORTING ALGORITHM USED" << endl;
}

// Function to print the array
void printarray(int arr[], int n)
{
    for (int i = 0; i < n; i++)
    {
        cout << arr[i] << " ";
    }
    cout << endl;
}

int main()
{
    
    int n;
    
    
    cin >> n;
    int arr1[n];
    int arr2[n];
    
    cout << "Enter elements of array:";
    for (int i = 0; i < n; i++)
    {
        int a;
        cin >> a;
        arr1[i] = a;
        arr2[i] = a;
    }
    
    cout << "\nARRAY before sorting:";
    printarray(arr1, n);
    cout << endl;
    
    cout << "BUBBLE SORT" << endl;
    bubble_sort(arr1, n);
    cout << " . ARRAY After Sorting Using Bubble Sorting:";
    printarray(arr1, n);
    cout << endl;

    
    cout << "SELECTION SORT" << endl;
    selection_sort(arr2, n);
    cout << " . ARRAY After Sorting Using Selection Sorting:";
    printarray(arr2, n);
}
/*

BONUS QUESTION

TIME COMPLEXITY OF BUBBLE SORT
   From the above code of BUBBLE SORT we can see that there are two
   while loops which will we executed.First while loop will run n-1
   times and second while loop will run n-2 times and so on till 1 time.
   Time Complexity=(n-1)+(n-2)+(n-3)....+2+1=(n-1)(n)/2
                  =O(n^2)

TIME COMPLEXITY OF SELECTION SORT
    In selection sort the main time consuming task is finding minimum
    element from the array.We have to scan all the elements of the
    array to find the minimum element.
    With reference to the above code of SELECTION SORT,first we will
    search for minimum element in array of size n,then in the same array of size n-1,and so on till array of size 1.
    Time Complexity=(n)+(n-1)+(n-2)...1=(n)(n+1)/2
                   =O(n^2)

*/
